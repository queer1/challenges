input & output hashes

00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
44 17 29 0E 96 76 80 ED 47 48 7D 6C A1 03 99 8B

00 11 22 33 44 55 66 77 88 99 AA BB CC DD EE FF
7D CE 69 88 AE 0E 74 8C 89 11 2D 3E 2A C5 F7 CE


Dump an instruction trace with tracert and execute the following command.
Tracert is a pintool, which can be called something like the following.

$ pin.exe -t tracert-x86.dll -- baboon.exe > log.txt

$ grep 'ptr \[' log.txt |grep '*4'|grep lea|grep -v j|cut -d+ -f2|cut -d] -f1

We will now have the addresses of all the jump tables which only set a
hardcoded imm8 to a hardcoded address. Using the table dumper in baboon.cpp we
can then dump the tables which result from the jump tables which write one
byte to a constant address (constant across each 256 functions.)
Note: there were a few odd entries in the log, namely a few different
instructions (push dword ptr [reg32*4+offset], lea something), which I
happily patched in the logfile as that was easier than implementing corner
cases in the code.

The bash script dump.sh will dump all tables, one at a time. Dump these tables
to a python file, so we can import them later.

Besides jump tables, we also have to dump various simple lookup tables. We
find them by running the following command against one of the newer logs.

$ egrep '(lea|mov)' log.txt |grep '\['|py logparser.py a

From there on, we dump them using dump.sh with our dumpmem.py script, which
reads the bytes directly from the binary.

We then automatically create imitator.py, which gives the same output as the
original binary. To make life easier the imitator.py dumps a SSA version. That
is, as global variables are reused several time, it makes life easier later to
rename them in such a way that all variables are unique (i.e., var_0049d7f9_0,
var_0049d7f9_1, etc.)

$ egrep '(lea|mov|state)' log.txt |egrep '(\[|\#)'|py logparser.py >imitator.py

From here on we create the keygen. The keygen is based on two parts.. As you
may understand, scripts & logs were work-in-progress at each state in the
challenge, resulting in possibly broken and really scarey scripts. So the
logparser.py, which created the imitator.py, now also creates the keygen.py
file, using the following command.

$ egrep '(lea|mov|state)' log.txt |egrep '(\[|\#)'|py logparser.py a b >keygen.py

The generated keygen.py file, which imports the utilz.py script, has a table
of all operations, and calls utilz.killit() with the table as parameter. The
name killit came from "kill with fire", which were functions in utilz.py at
an earlier stage because I got frustrated. The killit function on it's turn
does some magic and dumps a C file. It finds correlating table lookups and
dumps a big bruteforcer. The bruteforcer "format" is based on keygenhalp.c,
which is a bruteforcer I wrote by hand based on various table lookups and
stuff I collected from the table of operations. (And which seemed to work.)

From there on, the bruteforcer calculates four "tree nodes" at a time (there
are 144 in total.) The tree nodes, as I called them, are the variables that
were used in four different 256-byte sized lookup tables. These are the
starting points for bruteforcing. For example, in keygenhalp.c, the four
iterators for each for-loop are "tree nodes". (I called them tree nodes as the
whole lookup can be seen as a tree; you have to calculate the lowest four
tree nodes, then you can calculate the upper tree nodes of those nodes, etc.
at the end you have the state for the hash.)
Note: I swapped around some tree nodes in the keygen.py table, as they were
at the wrong index and therefore required to know variables which were not yet
known at that point in the bruteforcer. Again, this was about approximately
four entries, and therefore easier to patch then to implement in the scripts.

Long story short, we create a hardcoded keygen, using the following command.
With a few changes it'll be able to take a hash at the cmdline, but for now
this is good enough. Ah, btw, there's also a script to dump the tables from
tables.py into a C file, called tables2c.py..

$ py keygen.py 00112233445566778899aabbccddeeff >keygen.c
$ gcc -c tables.c -o tables.o
$ gcc -O3 -s keygen.c tables.o -o keygen.exe -std=c99
$ ./keygen.exe

Now we run the keygen. It will take a few minutes to finish, but it shows the
results of the tree nodes as they're found. Finally, the resulting hash is
printed.

That said, great challenge. Made me do some cool stuff, so that's all nice.
My plan was to make a big blogpost about the writeup, but cleaner etc. For
example, modify and clean all the scripts so one does not need 10 scripts to
generate the final keygen.

Regards,
Jurriaan Bremer
